import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var SidebarNavService = /** @class */ (function () {
    function SidebarNavService() {
    }
SidebarNavService.ɵfac = function SidebarNavService_Factory(t) { return new (t || SidebarNavService)(); };
SidebarNavService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavService, factory: function (t) { return SidebarNavService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return SidebarNavService;
}());
export { SidebarNavService };
var SidebarNavHelper = /** @class */ (function () {
    function SidebarNavHelper() {
        this.hasBadge = function (item) { return Boolean(item.badge); };
        this.hasIcon = function (item) { return Boolean(item.icon); };
    }
    SidebarNavHelper.prototype.itemType = function (item) {
        if (item.divider) {
            return 'divider';
        }
        else if (item.title) {
            return 'title';
        }
        else if (item.children) {
            return 'dropdown';
        }
        else if (item.label) {
            return 'label';
        }
        else if (!Object.keys(item).length) {
            return 'empty';
        }
        else {
            return 'link';
        }
    };
    SidebarNavHelper.prototype.isActive = function (router, item) {
        return router.isActive(item.url, false);
    };
    SidebarNavHelper.prototype.getIconClass = function (item) {
        var classes = {
            'nav-icon': true
        };
        if (this.hasIcon(item)) {
            var icon = item.icon;
            classes[icon] = this.hasIcon(item);
        }
        return classes;
    };
SidebarNavHelper.ɵfac = function SidebarNavHelper_Factory(t) { return new (t || SidebarNavHelper)(); };
SidebarNavHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavHelper, factory: function (t) { return SidebarNavHelper.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavHelper, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return SidebarNavHelper;
}());
export { SidebarNavHelper };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNpZGViYXItbmF2LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY29yZXVpL2FuZ3VsYXIvbGliL3NpZGViYXIvYXBwLXNpZGViYXItbmF2LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDO0FBRUssSUFGTDtBQUErQixJQUsvQixDQUFDO0lBTHFCLGlCQUFpQix3QkFEdEMsVUFBVSxFQUFFLFFBQ1MsaUJBQWlCLENBS3RDOzs7O2dEQUNEO0FBQ0EsSUFGQSx3QkFBQztBQUVELENBRkMsQUFMRCxJQUtDO0FBQ0QsU0FOc0IsaUJBQWlCO0FBUXZDO0FBRW1CLElBRm5CO0FBQThCLFFBc0JyQixhQUFRLEdBQUcsVUFBQyxJQUFJLElBQUssT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFuQixDQUFtQixDQUFDO0FBQ2xELFFBQVMsWUFBTyxHQUFHLFVBQUMsSUFBSSxJQUFLLE9BQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQztBQUNoRCxJQVdBLENBQUM7QUFDRCxJQWxDUyxtQ0FBUSxHQUFmLFVBQWdCLElBQUk7QUFDdEIsUUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEIsWUFBTSxPQUFPLFNBQVMsQ0FBQztBQUN2QixTQUFLO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDM0IsWUFBTSxPQUFPLE9BQU8sQ0FBQztBQUNyQixTQUFLO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDOUIsWUFBTSxPQUFPLFVBQVUsQ0FBQztBQUN4QixTQUFLO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDM0IsWUFBTSxPQUFPLE9BQU8sQ0FBQztBQUNyQixTQUFLO0FBQUMsYUFBSyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDMUMsWUFBTSxPQUFPLE9BQU8sQ0FBQztBQUNyQixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxNQUFNLENBQUM7QUFDcEIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVILElBQVMsbUNBQVEsR0FBZixVQUFnQixNQUFNLEVBQUUsSUFBSTtBQUM5QixRQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUVILElBR1MsdUNBQVksR0FBbkIsVUFBb0IsSUFBSTtBQUMxQixRQUFJLElBQU0sT0FBTyxHQUFHO0FBQ3BCLFlBQU0sVUFBVSxFQUFFLElBQUk7QUFDdEIsU0FBSyxDQUFDO0FBQ04sUUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDNUIsWUFBTSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdCLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsU0FBSztBQUNMLFFBQUksT0FBTyxPQUFPLENBQUM7QUFDbkIsSUFBRSxDQUFDO0lBbENVLGdCQUFnQix3QkFENUIsVUFBVSxFQUFFLFFBQ0EsZ0JBQWdCLENBbUM1Qjs7OztnREFDRDtBQUFDLElBREQsdUJBQUM7QUFDQSxDQURBLEFBbkNELElBbUNDO0FBQ0QsU0FwQ2EsZ0JBQWdCO0FBRTdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgSU5hdkRhdGEgfSBmcm9tICcuL2FwcC1zaWRlYmFyLW5hdic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaWRlYmFyTmF2U2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHNpZGViYXItbmF2IGl0ZW1zIGNvbmZpZyBOYXZEYXRhXHJcbiAgICovXHJcbiAgYWJzdHJhY3QgZ2V0U2lkZWJhck5hdkl0ZW1zQ29uZmlnKCk6IElOYXZEYXRhW107XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNpZGViYXJOYXZIZWxwZXIge1xyXG5cclxuICBwdWJsaWMgaXRlbVR5cGUoaXRlbSkge1xyXG4gICAgaWYgKGl0ZW0uZGl2aWRlcikge1xyXG4gICAgICByZXR1cm4gJ2RpdmlkZXInO1xyXG4gICAgfSBlbHNlIGlmIChpdGVtLnRpdGxlKSB7XHJcbiAgICAgIHJldHVybiAndGl0bGUnO1xyXG4gICAgfSBlbHNlIGlmIChpdGVtLmNoaWxkcmVuKSB7XHJcbiAgICAgIHJldHVybiAnZHJvcGRvd24nO1xyXG4gICAgfSBlbHNlIGlmIChpdGVtLmxhYmVsKSB7XHJcbiAgICAgIHJldHVybiAnbGFiZWwnO1xyXG4gICAgfSBlbHNlIGlmICghT2JqZWN0LmtleXMoaXRlbSkubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiAnZW1wdHknO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICdsaW5rJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0FjdGl2ZShyb3V0ZXIsIGl0ZW0pIHtcclxuICAgIHJldHVybiByb3V0ZXIuaXNBY3RpdmUoaXRlbS51cmwsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNCYWRnZSA9IChpdGVtKSA9PiBCb29sZWFuKGl0ZW0uYmFkZ2UpO1xyXG4gIHB1YmxpYyBoYXNJY29uID0gKGl0ZW0pID0+IEJvb2xlYW4oaXRlbS5pY29uKTtcclxuXHJcbiAgcHVibGljIGdldEljb25DbGFzcyhpdGVtKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0ge1xyXG4gICAgICAnbmF2LWljb24nOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgaWYgKHRoaXMuaGFzSWNvbihpdGVtKSkge1xyXG4gICAgICBjb25zdCBpY29uID0gaXRlbS5pY29uO1xyXG4gICAgICBjbGFzc2VzW2ljb25dID0gdGhpcy5oYXNJY29uKGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==