import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Renderer2 } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var RemoveClasses = function (NewClassNames) {
    var MatchClasses = NewClassNames.map(function (Class) { return document.body.classList.contains(Class); });
    return MatchClasses.indexOf(true) !== -1;
};
var ɵ0 = RemoveClasses;
export var ToggleClasses = function (Toggle, ClassNames) {
    var Level = ClassNames.indexOf(Toggle);
    var NewClassNames = ClassNames.slice(0, Level + 1);
    if (RemoveClasses(NewClassNames)) {
        NewClassNames.map(function (Class) { return document.body.classList.remove(Class); });
    }
    else {
        document.body.classList.add(Toggle);
    }
};
var ClassToggler = /** @class */ (function () {
    function ClassToggler(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    ClassToggler.prototype.removeClasses = function (NewClassNames) {
        var _this = this;
        var MatchClasses = NewClassNames.map(function (Class) { return _this.document.body.classList.contains(Class); });
        return MatchClasses.indexOf(true) !== -1;
    };
    ClassToggler.prototype.toggleClasses = function (Toggle, ClassNames) {
        var _this = this;
        var Level = ClassNames.indexOf(Toggle);
        var NewClassNames = ClassNames.slice(0, Level + 1);
        if (this.removeClasses(NewClassNames)) {
            NewClassNames.map(function (Class) { return _this.renderer.removeClass(_this.document.body, Class); });
        }
        else {
            this.renderer.addClass(this.document.body, Toggle);
        }
    };
    ClassToggler.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 }
    ]; };
    ClassToggler = __decorate([ __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object, Renderer2])
    ], ClassToggler);
ClassToggler.ɵfac = function ClassToggler_Factory(t) { return new (t || ClassToggler)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
ClassToggler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ClassToggler, factory: function (t) { return ClassToggler.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClassToggler, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, null); })();
    return ClassToggler;
}());
export { ClassToggler };
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWNsYXNzZXMuanMiLCJzb3VyY2VzIjpbIm5nOi9AY29yZXVpL2FuZ3VsYXIvbGliL3NoYXJlZC90b2dnbGUtY2xhc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFekMsSUFBTSxhQUFhLEdBQUcsVUFBQyxhQUFhO0FBQUksSUFDdEMsSUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO0FBQzdGLElBQUUsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUNGO0FBQ0EsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLFVBQUMsTUFBTSxFQUFFLFVBQVU7QUFBSSxJQUNsRCxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLElBQUUsSUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELElBQ0UsSUFBSSxhQUFhLENBQUMsYUFBYSxDQUFDLEVBQUU7QUFDcEMsUUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFyQyxDQUFxQyxDQUFDLENBQUM7QUFDeEUsS0FBRztBQUFDLFNBQUs7QUFDVCxRQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxLQUFHO0FBQ0gsQ0FBQyxDQUFDO0FBR0Y7QUFHSSxJQURGLHNCQUM0QixRQUFhLEVBQy9CLFFBQW1CO0FBQzdCLFFBRjRCLGFBQVEsR0FBUixRQUFRLENBQUs7QUFBQyxRQUNoQyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsSUFDM0IsQ0FBQztBQUNOLElBQ0Usb0NBQWEsR0FBYixVQUFjLGFBQWE7QUFDN0IsUUFERSxpQkFHQztBQUNILFFBSEksSUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQTVDLENBQTRDLENBQUMsQ0FBQztBQUNwRyxRQUFJLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3QyxJQUFFLENBQUM7QUFFSCxJQUFFLG9DQUFhLEdBQWIsVUFBYyxNQUFNLEVBQUUsVUFBVTtBQUNsQyxRQURFLGlCQVNDO0FBQ0gsUUFUSSxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLFFBQUksSUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pELFFBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxFQUFFO0FBQzNDLFlBQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFwRCxDQUFvRCxDQUFDLENBQUM7QUFDekYsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDRjtBQUN1RCxnREFwQm5ELE1BQU0sU0FBQyxRQUFRO0FBQVMsZ0JBQ1AsU0FBUztBQUM5QjtBQUVFLElBUFUsWUFBWSx3QkFEeEIsVUFBVSxFQUFFLHJCQUNMLENBR0gsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7QUFBRSxpREFDRCxTQUFTO0FBQzlCLE9BTFksWUFBWSxDQXNCeEI7Ozs7Ozs7OzhEQUNEO0FBQUMsSUFERCxtQkFBQztBQUNBLENBREEsQUF0QkQsSUFzQkM7QUFDRCxTQXZCYSxZQUFZO0FBRXpCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmNvbnN0IFJlbW92ZUNsYXNzZXMgPSAoTmV3Q2xhc3NOYW1lcykgPT4ge1xyXG4gIGNvbnN0IE1hdGNoQ2xhc3NlcyA9IE5ld0NsYXNzTmFtZXMubWFwKChDbGFzcykgPT4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3MpKTtcclxuICByZXR1cm4gTWF0Y2hDbGFzc2VzLmluZGV4T2YodHJ1ZSkgIT09IC0xO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFRvZ2dsZUNsYXNzZXMgPSAoVG9nZ2xlLCBDbGFzc05hbWVzKSA9PiB7XHJcbiAgY29uc3QgTGV2ZWwgPSBDbGFzc05hbWVzLmluZGV4T2YoVG9nZ2xlKTtcclxuICBjb25zdCBOZXdDbGFzc05hbWVzID0gQ2xhc3NOYW1lcy5zbGljZSgwLCBMZXZlbCArIDEpO1xyXG5cclxuICBpZiAoUmVtb3ZlQ2xhc3NlcyhOZXdDbGFzc05hbWVzKSkge1xyXG4gICAgTmV3Q2xhc3NOYW1lcy5tYXAoKENsYXNzKSA9PiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3MpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFRvZ2dsZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2xhc3NUb2dnbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgKSB7fVxyXG5cclxuICByZW1vdmVDbGFzc2VzKE5ld0NsYXNzTmFtZXMpIHtcclxuICAgIGNvbnN0IE1hdGNoQ2xhc3NlcyA9IE5ld0NsYXNzTmFtZXMubWFwKChDbGFzcykgPT4gdGhpcy5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhDbGFzcykpO1xyXG4gICAgcmV0dXJuIE1hdGNoQ2xhc3Nlcy5pbmRleE9mKHRydWUpICE9PSAtMTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUNsYXNzZXMoVG9nZ2xlLCBDbGFzc05hbWVzKSB7XHJcbiAgICBjb25zdCBMZXZlbCA9IENsYXNzTmFtZXMuaW5kZXhPZihUb2dnbGUpO1xyXG4gICAgY29uc3QgTmV3Q2xhc3NOYW1lcyA9IENsYXNzTmFtZXMuc2xpY2UoMCwgTGV2ZWwgKyAxKTtcclxuXHJcbiAgICBpZiAodGhpcy5yZW1vdmVDbGFzc2VzKE5ld0NsYXNzTmFtZXMpKSB7XHJcbiAgICAgIE5ld0NsYXNzTmFtZXMubWFwKChDbGFzcykgPT4gdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmRvY3VtZW50LmJvZHksIENsYXNzKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZG9jdW1lbnQuYm9keSwgVG9nZ2xlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19