import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let SidebarNavService = class SidebarNavService {
};
SidebarNavService.ɵfac = function SidebarNavService_Factory(t) { return new (t || SidebarNavService)(); };
SidebarNavService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavService, factory: SidebarNavService.ɵfac });
export { SidebarNavService };
let SidebarNavHelper = class SidebarNavHelper {
    constructor() {
        this.hasBadge = (item) => Boolean(item.badge);
        this.hasIcon = (item) => Boolean(item.icon);
    }
    itemType(item) {
        if (item.divider) {
            return 'divider';
        }
        else if (item.title) {
            return 'title';
        }
        else if (item.children) {
            return 'dropdown';
        }
        else if (item.label) {
            return 'label';
        }
        else if (!Object.keys(item).length) {
            return 'empty';
        }
        else {
            return 'link';
        }
    }
    isActive(router, item) {
        return router.isActive(item.url, false);
    }
    getIconClass(item) {
        const classes = {
            'nav-icon': true
        };
        if (this.hasIcon(item)) {
            const icon = item.icon;
            classes[icon] = this.hasIcon(item);
        }
        return classes;
    }
};
SidebarNavHelper.ɵfac = function SidebarNavHelper_Factory(t) { return new (t || SidebarNavHelper)(); };
SidebarNavHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavHelper, factory: SidebarNavHelper.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavService, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavHelper, [{
        type: Injectable
    }], function () { return []; }, null); })();
export { SidebarNavHelper };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNpZGViYXItbmF2LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AY29yZXVpL2FuZ3VsYXIvbGliL3NpZGViYXIvYXBwLXNpZGViYXItbmF2LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLElBQXNCLGlCQUFpQixHQUF2QyxNQUFzQixpQkFBaUI7QUFDdkMsQ0FJQyxDQUFBO0FBTHFCLGlCQUFpQixvQkFEdEMsVUFBVSxFQUFFLElBQ1MsaUJBQWlCLENBS3RDO21IQUNEO0FBQ0EsU0FQc0IsaUJBQWlCO0FBUXZDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQzdCLElBREE7QUFBZ0IsUUFzQlAsYUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xELFFBQVMsWUFBTyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELElBV0EsQ0FBQztBQUNELElBbENTLFFBQVEsQ0FBQyxJQUFJO0FBQ3RCLFFBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3RCLFlBQU0sT0FBTyxTQUFTLENBQUM7QUFDdkIsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQzNCLFlBQU0sT0FBTyxPQUFPLENBQUM7QUFDckIsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzlCLFlBQU0sT0FBTyxVQUFVLENBQUM7QUFDeEIsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQzNCLFlBQU0sT0FBTyxPQUFPLENBQUM7QUFDckIsU0FBSztBQUFDLGFBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO0FBQzFDLFlBQU0sT0FBTyxPQUFPLENBQUM7QUFDckIsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLE9BQU8sTUFBTSxDQUFDO0FBQ3BCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNTLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSTtBQUM5QixRQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNILElBSVMsWUFBWSxDQUFDLElBQUk7QUFDMUIsUUFBSSxNQUFNLE9BQU8sR0FBRztBQUNwQixZQUFNLFVBQVUsRUFBRSxJQUFJO0FBQ3RCLFNBQUssQ0FBQztBQUNOLFFBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzVCLFlBQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM3QixZQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLFNBQUs7QUFDTCxRQUFJLE9BQU8sT0FBTyxDQUFDO0FBQ25CLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQW5DWSxnQkFBZ0Isb0JBRDVCLFVBQVUsRUFBRSxJQUNBLGdCQUFnQixDQW1DNUI7Ozs7Ozs7Z0RBQ0Q7QUFBQyxTQXBDWSxnQkFBZ0I7QUFFN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBJTmF2RGF0YSB9IGZyb20gJy4vYXBwLXNpZGViYXItbmF2JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpZGViYXJOYXZTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgc2lkZWJhci1uYXYgaXRlbXMgY29uZmlnIE5hdkRhdGFcclxuICAgKi9cclxuICBhYnN0cmFjdCBnZXRTaWRlYmFyTmF2SXRlbXNDb25maWcoKTogSU5hdkRhdGFbXTtcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2lkZWJhck5hdkhlbHBlciB7XHJcblxyXG4gIHB1YmxpYyBpdGVtVHlwZShpdGVtKSB7XHJcbiAgICBpZiAoaXRlbS5kaXZpZGVyKSB7XHJcbiAgICAgIHJldHVybiAnZGl2aWRlcic7XHJcbiAgICB9IGVsc2UgaWYgKGl0ZW0udGl0bGUpIHtcclxuICAgICAgcmV0dXJuICd0aXRsZSc7XHJcbiAgICB9IGVsc2UgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgcmV0dXJuICdkcm9wZG93bic7XHJcbiAgICB9IGVsc2UgaWYgKGl0ZW0ubGFiZWwpIHtcclxuICAgICAgcmV0dXJuICdsYWJlbCc7XHJcbiAgICB9IGVsc2UgaWYgKCFPYmplY3Qua2V5cyhpdGVtKS5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuICdlbXB0eSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ2xpbmsnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGlzQWN0aXZlKHJvdXRlciwgaXRlbSkge1xyXG4gICAgcmV0dXJuIHJvdXRlci5pc0FjdGl2ZShpdGVtLnVybCwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc0JhZGdlID0gKGl0ZW0pID0+IEJvb2xlYW4oaXRlbS5iYWRnZSk7XHJcbiAgcHVibGljIGhhc0ljb24gPSAoaXRlbSkgPT4gQm9vbGVhbihpdGVtLmljb24pO1xyXG5cclxuICBwdWJsaWMgZ2V0SWNvbkNsYXNzKGl0ZW0pIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB7XHJcbiAgICAgICduYXYtaWNvbic6IHRydWVcclxuICAgIH07XHJcbiAgICBpZiAodGhpcy5oYXNJY29uKGl0ZW0pKSB7XHJcbiAgICAgIGNvbnN0IGljb24gPSBpdGVtLmljb247XHJcbiAgICAgIGNsYXNzZXNbaWNvbl0gPSB0aGlzLmhhc0ljb24oaXRlbSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcbn1cclxuIl19